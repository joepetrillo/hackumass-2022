// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Member        Member[]
  Group         Group[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id            String         @id @default(cuid())
  ownerId       String         
  name          String
  description   String
  createdAt     DateTime       @default(now())
  GroupSessions GroupSession[]
  Members       Member[]
  user          User           @relation(fields: [ownerId], references: [id])
}

model Member {
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group   Group  @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

model GroupSession {
  id        String     @id @default(cuid())
  groupId   String
  expired   Boolean
  name      String
  createdAt DateTime   @default(now())
  Questions Question[]
  Group     Group      @relation(fields: [groupId], references: [id])
}

model Question {
  id             String       @id @default(cuid())
  numOptions     Int
  correct        String
  groupSessionId String
  GroupSession   GroupSession @relation(fields: [groupSessionId], references: [id])
}

model Response {
  id         String  @id @default(cuid())
  userId     String
  questionId String
  response   String
  isCorrect  Boolean
}
